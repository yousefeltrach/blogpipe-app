{
  "version": 3,
  "sources": ["../../src/models/BlogPipeTopics.ts"],
  "sourcesContent": ["import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  DefaultSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n  Select,\n  DeepFilterNever,\n  IDsList,\n      BlogPipeTopics,\n      BlogPipeTopicsSort,\n      BlogPipeTopicsFilter,\n      AvailableBlogPipeTopicsSelection,\n      CreateBlogPipeTopicsInput,\n      UpdateBlogPipeTopicsInput,\n      ActionABlogPipeTopicsInput,\n  \n} from \"../types.js\";\n\nimport { disambiguateActionParams } from \"../support.js\";\n\nexport const DefaultBlogPipeTopicsSelection = {\n  \"__typename\": true,\n  \"createdAt\": true,\n  \"id\": true,\n  \"keywords\": true,\n  \"title\": true,\n  \"updatedAt\": true\n} as const;\n\n/**\n* Produce a type that holds only the selected fields (and nested fields) of \"blogPipeTopics\". The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedBlogPipeTopicsOrDefault<Options extends Selectable<AvailableBlogPipeTopicsSelection>> = DeepFilterNever<\n  Select<\n    BlogPipeTopics,\n    DefaultSelection<\n      AvailableBlogPipeTopicsSelection,\n      Options,\n      typeof DefaultBlogPipeTopicsSelection\n    >\n  >>;\n\n/** Options that can be passed to the `BlogPipeTopicsManager#findOne` method */\nexport interface FindOneBlogPipeTopicsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n};\n\n/** Options that can be passed to the `BlogPipeTopicsManager#maybeFindOne` method */\nexport interface MaybeFindOneBlogPipeTopicsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n};\n\n/** Options that can be passed to the `BlogPipeTopicsManager#findMany` method */\nexport interface FindManyBlogPipeTopicssOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n  /** Return records sorted by these sorts */\n  sort?: BlogPipeTopicsSort | BlogPipeTopicsSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BlogPipeTopicsFilter | BlogPipeTopicsFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n\n/** Options that can be passed to the `BlogPipeTopicsManager#findFirst` method */\nexport interface FindFirstBlogPipeTopicsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n  /** Return records sorted by these sorts */\n  sort?: BlogPipeTopicsSort | BlogPipeTopicsSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BlogPipeTopicsFilter | BlogPipeTopicsFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n/** Options that can be passed to the `BlogPipeTopicsManager#maybeFindFirst` method */\nexport interface MaybeFindFirstBlogPipeTopicsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n  /** Return records sorted by these sorts */\n  sort?: BlogPipeTopicsSort | BlogPipeTopicsSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BlogPipeTopicsFilter | BlogPipeTopicsFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n\nexport interface CreateBlogPipeTopicsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n};\n\n\nexport interface UpdateBlogPipeTopicsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n};\n\n\nexport interface DeleteBlogPipeTopicsOptions {\n};\n\n\nexport interface ActionABlogPipeTopicsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBlogPipeTopicsSelection;\n};\n\n\nconst apiIdentifier = \"blogPipeTopics\";\nconst pluralApiIdentifier = \"blogPipeTopicss\";\n\n\n    \n  /**\n   * The fully-qualified, expanded form of the inputs for executing this action.\n   * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n   **/\n  export type FullyQualifiedCreateBlogPipeTopicsVariables = {\n          blogPipeTopics?: CreateBlogPipeTopicsInput,\n      }\n\n  /**\n   * The inputs for executing create on blogPipeTopics.\n   * This is the flattened style of inputs, suitable for general use, and should be preferred.\n   **/\n\n    export type CreateBlogPipeTopicsVariables = CreateBlogPipeTopicsInput;\n\n\n\n/**\n * The return value from executing create on blogPipeTopics.\n * \"Is a GadgetRecord of the model's type.\"\n **/\nexport type CreateBlogPipeTopicsResult<Options extends CreateBlogPipeTopicsOptions> =\n  SelectedBlogPipeTopicsOrDefault<Options> extends void ? void : GadgetRecord<SelectedBlogPipeTopicsOrDefault<Options>>\n;\n\n\n/**\n  * Executes the create action. Accepts the parameters for the action via the `variables` argument. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function createBlogPipeTopics<Options extends CreateBlogPipeTopicsOptions>(\n  \n    variables: CreateBlogPipeTopicsVariables,\n\n  options?: LimitToKnownKeys<Options, CreateBlogPipeTopicsOptions>\n): Promise<CreateBlogPipeTopicsResult<Options>>;\n\n// Fully qualified, nested api identifier overload\nasync function createBlogPipeTopics<Options extends CreateBlogPipeTopicsOptions>(\n  \n      variables: FullyQualifiedCreateBlogPipeTopicsVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateBlogPipeTopicsOptions>\n): Promise<CreateBlogPipeTopicsResult<Options>>;\n\n// Function implementation\nasync function createBlogPipeTopics<Options extends CreateBlogPipeTopicsOptions>(\n  this: BlogPipeTopicsManager,\n  \n      variables: CreateBlogPipeTopicsVariables | FullyQualifiedCreateBlogPipeTopicsVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateBlogPipeTopicsOptions>\n): Promise<CreateBlogPipeTopicsResult<Options>> {\n    const newVariables = disambiguateActionParams(\n      this[\"create\"],\n       undefined,\n      variables\n    );\n\n  return (await actionRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n    this,\n    \"createBlogPipeTopics\",\n    DefaultBlogPipeTopicsSelection,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n                    \"blogPipeTopics\": {\n          value: newVariables.blogPipeTopics,\n          required: false,\n          type: \"CreateBlogPipeTopicsInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n    \n  /**\n   * The fully-qualified, expanded form of the inputs for executing this action.\n   * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n   **/\n  export type FullyQualifiedUpdateBlogPipeTopicsVariables = {\n          blogPipeTopics?: UpdateBlogPipeTopicsInput,\n      }\n\n  /**\n   * The inputs for executing update on blogPipeTopics.\n   * This is the flattened style of inputs, suitable for general use, and should be preferred.\n   **/\n\n    export type UpdateBlogPipeTopicsVariables = UpdateBlogPipeTopicsInput;\n\n\n\n/**\n * The return value from executing update on blogPipeTopics.\n * \"Is a GadgetRecord of the model's type.\"\n **/\nexport type UpdateBlogPipeTopicsResult<Options extends UpdateBlogPipeTopicsOptions> =\n  SelectedBlogPipeTopicsOrDefault<Options> extends void ? void : GadgetRecord<SelectedBlogPipeTopicsOrDefault<Options>>\n;\n\n\n/**\n  * Executes the update action on one record specified by `id`. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function updateBlogPipeTopics<Options extends UpdateBlogPipeTopicsOptions>(\n  id: string,\n    variables: UpdateBlogPipeTopicsVariables,\n\n  options?: LimitToKnownKeys<Options, UpdateBlogPipeTopicsOptions>\n): Promise<UpdateBlogPipeTopicsResult<Options>>;\n\n// Fully qualified, nested api identifier overload\nasync function updateBlogPipeTopics<Options extends UpdateBlogPipeTopicsOptions>(\n  id: string,\n      variables: FullyQualifiedUpdateBlogPipeTopicsVariables,\n  \n  options?: LimitToKnownKeys<Options, UpdateBlogPipeTopicsOptions>\n): Promise<UpdateBlogPipeTopicsResult<Options>>;\n\n// Function implementation\nasync function updateBlogPipeTopics<Options extends UpdateBlogPipeTopicsOptions>(\n  this: BlogPipeTopicsManager,\n  id: string,\n      variables: UpdateBlogPipeTopicsVariables | FullyQualifiedUpdateBlogPipeTopicsVariables,\n  \n  options?: LimitToKnownKeys<Options, UpdateBlogPipeTopicsOptions>\n): Promise<UpdateBlogPipeTopicsResult<Options>> {\n    const newVariables = disambiguateActionParams(\n      this[\"update\"],\n       id,\n      variables\n    );\n\n  return (await actionRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n    this,\n    \"updateBlogPipeTopics\",\n    DefaultBlogPipeTopicsSelection,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n              id: {\n          value: id,\n          required: true,\n          type: \"GadgetID\",\n        },\n                    \"blogPipeTopics\": {\n          value: newVariables.blogPipeTopics,\n          required: false,\n          type: \"UpdateBlogPipeTopicsInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n    \n\n/**\n * The return value from executing delete on blogPipeTopics.\n * \"Is void because this action deletes the record\"\n **/\nexport type DeleteBlogPipeTopicsResult<Options extends DeleteBlogPipeTopicsOptions> =\n  void extends void ? void : GadgetRecord<SelectedBlogPipeTopicsOrDefault<Options>>\n;\n\n\n/**\n  * Executes the delete action on one record specified by `id`. Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n  */\n\n// Fully qualified, nested api identifier overload\nasync function deleteBlogPipeTopics<Options extends DeleteBlogPipeTopicsOptions>(\n  id: string,\n  \n  options?: LimitToKnownKeys<Options, DeleteBlogPipeTopicsOptions>\n): Promise<DeleteBlogPipeTopicsResult<Options>>;\n\n// Function implementation\nasync function deleteBlogPipeTopics<Options extends DeleteBlogPipeTopicsOptions>(\n  this: BlogPipeTopicsManager,\n  id: string,\n  \n  options?: LimitToKnownKeys<Options, DeleteBlogPipeTopicsOptions>\n): Promise<DeleteBlogPipeTopicsResult<Options>> {\n\n  return (await actionRunner<void>(\n    this,\n    \"deleteBlogPipeTopics\",\n    null,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n              id: {\n          value: id,\n          required: true,\n          type: \"GadgetID\",\n        },\n                },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n    \n  /**\n   * The fully-qualified, expanded form of the inputs for executing this action.\n   * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n   **/\n  export type FullyQualifiedActionABlogPipeTopicsVariables = {\n          blogPipeTopics?: ActionABlogPipeTopicsInput,\n      }\n\n  /**\n   * The inputs for executing actionA on blogPipeTopics.\n   * This is the flattened style of inputs, suitable for general use, and should be preferred.\n   **/\n\n    export type ActionABlogPipeTopicsVariables = ActionABlogPipeTopicsInput;\n\n\n\n/**\n * The return value from executing actionA on blogPipeTopics.\n * \"Is a GadgetRecord of the model's type.\"\n **/\nexport type ActionABlogPipeTopicsResult<Options extends ActionABlogPipeTopicsOptions> =\n  SelectedBlogPipeTopicsOrDefault<Options> extends void ? void : GadgetRecord<SelectedBlogPipeTopicsOrDefault<Options>>\n;\n\n\n/**\n  * Executes the actionA action on one record specified by `id`. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function actionABlogPipeTopics<Options extends ActionABlogPipeTopicsOptions>(\n  id: string,\n    variables: ActionABlogPipeTopicsVariables,\n\n  options?: LimitToKnownKeys<Options, ActionABlogPipeTopicsOptions>\n): Promise<ActionABlogPipeTopicsResult<Options>>;\n\n// Fully qualified, nested api identifier overload\nasync function actionABlogPipeTopics<Options extends ActionABlogPipeTopicsOptions>(\n  id: string,\n      variables: FullyQualifiedActionABlogPipeTopicsVariables,\n  \n  options?: LimitToKnownKeys<Options, ActionABlogPipeTopicsOptions>\n): Promise<ActionABlogPipeTopicsResult<Options>>;\n\n// Function implementation\nasync function actionABlogPipeTopics<Options extends ActionABlogPipeTopicsOptions>(\n  this: BlogPipeTopicsManager,\n  id: string,\n      variables: ActionABlogPipeTopicsVariables | FullyQualifiedActionABlogPipeTopicsVariables,\n  \n  options?: LimitToKnownKeys<Options, ActionABlogPipeTopicsOptions>\n): Promise<ActionABlogPipeTopicsResult<Options>> {\n    const newVariables = disambiguateActionParams(\n      this[\"actionA\"],\n       id,\n      variables\n    );\n\n  return (await actionRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n    this,\n    \"actionABlogPipeTopics\",\n    DefaultBlogPipeTopicsSelection,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n              id: {\n          value: id,\n          required: true,\n          type: \"GadgetID\",\n        },\n                    \"blogPipeTopics\": {\n          value: newVariables.blogPipeTopics,\n          required: false,\n          type: \"ActionABlogPipeTopicsInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n\n\n\n/** All the actions available at the collection level and record level for \"blogPipeTopics\" */\nexport class BlogPipeTopicsManager {\n  constructor(readonly connection: GadgetConnection) {}\n\n  \n    /**\n * Finds one blogPipeTopics by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nfindOne: {\n  <Options extends FindOneBlogPipeTopicsOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      >\n    >;\n  type: \"findOne\",\n  findByVariableName: \"id\";\n  operationName: \"blogPipeTopics\";\n  modelApiIdentifier: \"blogPipeTopics\";\n  defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n  selectionType: AvailableBlogPipeTopicsSelection;\n  optionsType: FindOneBlogPipeTopicsOptions;\n  schemaType: Query[\"blogPipeTopics\"];\n} = Object.assign(\n  async <Options extends FindOneBlogPipeTopicsOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneBlogPipeTopicsOptions>) => {\n    return await findOneRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n      this,\n      \"blogPipeTopics\",\n      id,\n      DefaultBlogPipeTopicsSelection,\n      apiIdentifier,\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"blogPipeTopics\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n  } as any\n)\n\n  \n    /**\n * Finds one blogPipeTopics by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nmaybeFindOne: {\n  <Options extends MaybeFindOneBlogPipeTopicsOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindOne\";\n  findByVariableName: \"id\";\n  operationName: \"blogPipeTopics\";\n  modelApiIdentifier: \"blogPipeTopics\";\n  defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n  selectionType: AvailableBlogPipeTopicsSelection;\n  optionsType: MaybeFindOneBlogPipeTopicsOptions;\n  schemaType: Query[\"blogPipeTopics\"];\n} = Object.assign(\n  async <Options extends MaybeFindOneBlogPipeTopicsOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneBlogPipeTopicsOptions>) => {\n    const record = await findOneRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n      this,\n      \"blogPipeTopics\",\n      id,\n      DefaultBlogPipeTopicsSelection,\n      apiIdentifier,\n      options,\n      false\n    );\n    return record.isEmpty() ? null : record;\n  },\n  {\n    type: \"maybeFindOne\",\n    findByVariableName: \"id\",\n    operationName: \"blogPipeTopics\",\n    modelApiIdentifier: \"blogPipeTopics\",\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n  } as any\n)\n\n  \n    /**\n * Finds many blogPipeTopics. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindMany: {\n  <Options extends FindManyBlogPipeTopicssOptions>(options?: LimitToKnownKeys<Options, FindManyBlogPipeTopicssOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      >\n    >;\n  type: \"findMany\";\n  operationName: \"blogPipeTopicss\";\n  modelApiIdentifier: \"blogPipeTopics\";\n  defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n  selectionType: AvailableBlogPipeTopicsSelection;\n  optionsType: FindManyBlogPipeTopicssOptions;\n  schemaType: Query[\"blogPipeTopics\"];\n} = Object.assign(\n  async <Options extends FindManyBlogPipeTopicssOptions>(options?: LimitToKnownKeys<Options, FindManyBlogPipeTopicssOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      >\n    > =>\n  {\n    return await findManyRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n      this,\n      \"blogPipeTopicss\",\n      DefaultBlogPipeTopicsSelection,\n      \"blogPipeTopics\",\n      options\n    );\n  },\n  {\n    type: \"findMany\",\n    operationName: \"blogPipeTopicss\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching blogPipeTopics. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindFirst: {\n  <Options extends FindFirstBlogPipeTopicsOptions>(options?: LimitToKnownKeys<Options, FindFirstBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      >\n    >;\n  type: \"findFirst\";\n  operationName: \"blogPipeTopicss\";\n  modelApiIdentifier: \"blogPipeTopics\";\n  defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n  selectionType: AvailableBlogPipeTopicsSelection;\n  optionsType: FindFirstBlogPipeTopicsOptions;\n  schemaType: Query[\"blogPipeTopics\"];\n} = Object.assign(\n  async <Options extends FindFirstBlogPipeTopicsOptions>(options?: LimitToKnownKeys<Options, FindFirstBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      >\n    > =>\n  {\n    const list = await findManyRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n      this,\n      \"blogPipeTopicss\",\n      DefaultBlogPipeTopicsSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      true\n    );\n    return list[0];\n  },\n  {\n    type: \"findFirst\",\n    operationName: \"blogPipeTopicss\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching blogPipeTopics. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n **/\nmaybeFindFirst: {\n  <Options extends MaybeFindFirstBlogPipeTopicsOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindFirst\";\n  operationName: \"blogPipeTopicss\";\n  modelApiIdentifier: \"blogPipeTopics\";\n  defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n  selectionType: AvailableBlogPipeTopicsSelection;\n  optionsType: MaybeFindFirstBlogPipeTopicsOptions;\n  schemaType: Query[\"blogPipeTopics\"];\n} = Object.assign(\n  async <Options extends MaybeFindFirstBlogPipeTopicsOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      > | null\n    > =>\n  {\n    const list = await findManyRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n      this,\n      \"blogPipeTopicss\",\n      DefaultBlogPipeTopicsSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      false\n    );\n    return list?.[0] ?? null;\n  },\n  {\n    type: \"maybeFindFirst\",\n    operationName: \"blogPipeTopicss\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n  } as any\n);\n\n  \n    /**\n  * Finds one blogPipeTopics by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n  **/\nfindById: {\n  <Options extends FindOneBlogPipeTopicsOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      >\n    >;\n  type: \"findOne\";\n  findByVariableName: \"id\";\n  operationName: \"blogPipeTopicss\";\n  modelApiIdentifier: \"blogPipeTopics\";\n  defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n  selectionType: AvailableBlogPipeTopicsSelection;\n  optionsType: FindOneBlogPipeTopicsOptions;\n  schemaType: Query[\"blogPipeTopics\"];\n} = Object.assign(\n  async <Options extends FindOneBlogPipeTopicsOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneBlogPipeTopicsOptions>):\n    Promise<\n      GadgetRecordImplementation<\n        SelectedBlogPipeTopicsOrDefault<Options>\n      > & SelectedBlogPipeTopicsOrDefault<Options>\n    > =>\n  {\n    return await findOneByFieldRunner<SelectedBlogPipeTopicsOrDefault<Options>>(\n      this,\n      \"blogPipeTopicss\",\n      \"id\",\n      value,\n      DefaultBlogPipeTopicsSelection,\n      apiIdentifier,\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"blogPipeTopicss\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n  } as any\n)\n\n  \n    create = Object.assign(createBlogPipeTopics,\n  {\n    type: \"action\",\n    operationName: \"createBlogPipeTopics\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n    variables: {\n      \"blogPipeTopics\": {\n        required: false,\n        type: \"CreateBlogPipeTopicsInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"createBlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: false;\n    defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n    selectionType: AvailableBlogPipeTopicsSelection;\n    optionsType: CreateBlogPipeTopicsOptions;\n    schemaType:  Query[\"blogPipeTopics\"];\n\n    variablesType: (\n\n      (\n        FullyQualifiedCreateBlogPipeTopicsVariables          | CreateBlogPipeTopicsVariables      )\n    ) | undefined;\n    variables: {\n                    \"blogPipeTopics\": {\n          required: false;\n          type: \"CreateBlogPipeTopicsInput\";\n        };\n          };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: true;\n  }\n)\n\n  \n      /**\n  * Executes the bulkCreate action with the given inputs.\n  */\n  bulkCreate: {\n    <Options extends CreateBlogPipeTopicsOptions>(\n        inputs: (FullyQualifiedCreateBlogPipeTopicsVariables | CreateBlogPipeTopicsVariables)[],\n      options?: LimitToKnownKeys<Options, CreateBlogPipeTopicsOptions>\n    ): Promise<CreateBlogPipeTopicsResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkCreateBlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: true;\n    defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n    selectionType: AvailableBlogPipeTopicsSelection;\n    optionsType: CreateBlogPipeTopicsOptions;\n    schemaType: Query[\"blogPipeTopics\"];\n    variablesType: (FullyQualifiedCreateBlogPipeTopicsVariables | CreateBlogPipeTopicsVariables)[];\n    variables: {\n        inputs: {\n          required: true;\n          type: \"[BulkCreateBlogPipeTopicsInput!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends CreateBlogPipeTopicsOptions>(\n        inputs: (FullyQualifiedCreateBlogPipeTopicsVariables | CreateBlogPipeTopicsVariables)[],\n      options?: LimitToKnownKeys<Options, CreateBlogPipeTopicsOptions>\n    ) => {\n        const fullyQualifiedInputs = inputs.map(input =>\n          disambiguateActionParams(\n            this[\"create\"],\n            undefined,\n            input\n          )\n        );\n      \n      return (await actionRunner<any>(\n        this,\n        \"bulkCreateBlogPipeTopics\",\n        DefaultBlogPipeTopicsSelection,\n        \"blogPipeTopics\",\n        \"blogPipeTopics\",\n        true,\n          {\n            inputs: {\n              value: fullyQualifiedInputs,\n              ...this[\"bulkCreate\"].variables[\"inputs\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkCreateBlogPipeTopics\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"blogPipeTopics\",\n      isBulk: true,\n      defaultSelection: DefaultBlogPipeTopicsSelection,\n      variables: {\n        inputs: {\n          required: true,\n          type: \"[BulkCreateBlogPipeTopicsInput!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: true,\n    } as any\n  );\n\n  \n    update = Object.assign(updateBlogPipeTopics,\n  {\n    type: \"action\",\n    operationName: \"updateBlogPipeTopics\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n    variables: {\n      id: {\n        required: true,\n        type: \"GadgetID\",\n      },\n      \"blogPipeTopics\": {\n        required: false,\n        type: \"UpdateBlogPipeTopicsInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"updateBlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: false;\n    defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n    selectionType: AvailableBlogPipeTopicsSelection;\n    optionsType: UpdateBlogPipeTopicsOptions;\n    schemaType:  Query[\"blogPipeTopics\"];\n\n    variablesType: (\n        { id: string } &\n\n      (\n        FullyQualifiedUpdateBlogPipeTopicsVariables          | UpdateBlogPipeTopicsVariables      )\n    ) | undefined;\n    variables: {\n              id: {\n          required: true;\n          type: \"GadgetID\";\n        };\n                    \"blogPipeTopics\": {\n          required: false;\n          type: \"UpdateBlogPipeTopicsInput\";\n        };\n          };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: true;\n  }\n)\n\n  \n      /**\n  * Executes the bulkUpdate action with the given inputs.\n  */\n  bulkUpdate: {\n    <Options extends UpdateBlogPipeTopicsOptions>(\n        inputs: (FullyQualifiedUpdateBlogPipeTopicsVariables | UpdateBlogPipeTopicsVariables & { id: string })[],\n      options?: LimitToKnownKeys<Options, UpdateBlogPipeTopicsOptions>\n    ): Promise<UpdateBlogPipeTopicsResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkUpdateBlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: true;\n    defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n    selectionType: AvailableBlogPipeTopicsSelection;\n    optionsType: UpdateBlogPipeTopicsOptions;\n    schemaType: Query[\"blogPipeTopics\"];\n    variablesType: (FullyQualifiedUpdateBlogPipeTopicsVariables | UpdateBlogPipeTopicsVariables & { id: string })[];\n    variables: {\n        inputs: {\n          required: true;\n          type: \"[BulkUpdateBlogPipeTopicsInput!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends UpdateBlogPipeTopicsOptions>(\n        inputs: (FullyQualifiedUpdateBlogPipeTopicsVariables | UpdateBlogPipeTopicsVariables & { id: string })[],\n      options?: LimitToKnownKeys<Options, UpdateBlogPipeTopicsOptions>\n    ) => {\n        const fullyQualifiedInputs = inputs.map(input =>\n          disambiguateActionParams(\n            this[\"update\"],\n            undefined,\n            input\n          )\n        );\n      \n      return (await actionRunner<any>(\n        this,\n        \"bulkUpdateBlogPipeTopics\",\n        DefaultBlogPipeTopicsSelection,\n        \"blogPipeTopics\",\n        \"blogPipeTopics\",\n        true,\n          {\n            inputs: {\n              value: fullyQualifiedInputs,\n              ...this[\"bulkUpdate\"].variables[\"inputs\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkUpdateBlogPipeTopics\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"blogPipeTopics\",\n      isBulk: true,\n      defaultSelection: DefaultBlogPipeTopicsSelection,\n      variables: {\n        inputs: {\n          required: true,\n          type: \"[BulkUpdateBlogPipeTopicsInput!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: true,\n    } as any\n  );\n\n  \n    delete = Object.assign(deleteBlogPipeTopics,\n  {\n    type: \"action\",\n    operationName: \"deleteBlogPipeTopics\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: null,\n    variables: {\n      id: {\n        required: true,\n        type: \"GadgetID\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: false,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: false,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"deleteBlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: false;\n    defaultSelection: null;\n    selectionType: Record<string, never>;\n    optionsType: DeleteBlogPipeTopicsOptions;\n    schemaType:  null ;\n\n    variablesType: (\n        { id: string } &\n\n        {}\n    ) | undefined;\n    variables: {\n              id: {\n          required: true;\n          type: \"GadgetID\";\n        };\n                };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: false;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: false;\n  }\n)\n\n  \n      /**\n  * Executes the bulkDelete action with the given inputs. Deletes the records on the server.\n  */\n  bulkDelete: {\n    <Options extends DeleteBlogPipeTopicsOptions>(\n        ids: string[],\n      options?: LimitToKnownKeys<Options, DeleteBlogPipeTopicsOptions>\n    ): Promise<DeleteBlogPipeTopicsResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkDeleteBlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: true;\n    defaultSelection: null;\n    selectionType: Record<string, never>;\n    optionsType: DeleteBlogPipeTopicsOptions;\n    schemaType: null;\n    variablesType: IDsList | undefined;\n    variables: {\n        ids: {\n          required: true;\n          type: \"[GadgetID!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends DeleteBlogPipeTopicsOptions>(\n        ids: string[],\n      options?: LimitToKnownKeys<Options, DeleteBlogPipeTopicsOptions>\n    ) => {\n\n      return (await actionRunner<any>(\n        this,\n        \"bulkDeleteBlogPipeTopics\",\n        null,\n        \"blogPipeTopics\",\n        \"blogPipeTopics\",\n        true,\n          {\n            ids: {\n              value: ids,\n              ...this[\"bulkDelete\"].variables[\"ids\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkDeleteBlogPipeTopics\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"blogPipeTopics\",\n      isBulk: true,\n      defaultSelection: null,\n      variables: {\n        ids: {\n          required: true,\n          type: \"[GadgetID!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: false,\n    } as any\n  );\n\n  \n    actionA = Object.assign(actionABlogPipeTopics,\n  {\n    type: \"action\",\n    operationName: \"actionABlogPipeTopics\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: DefaultBlogPipeTopicsSelection,\n    variables: {\n      id: {\n        required: true,\n        type: \"GadgetID\",\n      },\n      \"blogPipeTopics\": {\n        required: false,\n        type: \"ActionABlogPipeTopicsInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"actionABlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: false;\n    defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n    selectionType: AvailableBlogPipeTopicsSelection;\n    optionsType: ActionABlogPipeTopicsOptions;\n    schemaType:  Query[\"blogPipeTopics\"];\n\n    variablesType: (\n        { id: string } &\n\n      (\n        FullyQualifiedActionABlogPipeTopicsVariables          | ActionABlogPipeTopicsVariables      )\n    ) | undefined;\n    variables: {\n              id: {\n          required: true;\n          type: \"GadgetID\";\n        };\n                    \"blogPipeTopics\": {\n          required: false;\n          type: \"ActionABlogPipeTopicsInput\";\n        };\n          };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: true;\n  }\n)\n\n  \n      /**\n  * Executes the bulkActionA action with the given inputs.\n  */\n  bulkActionA: {\n    <Options extends ActionABlogPipeTopicsOptions>(\n        inputs: (FullyQualifiedActionABlogPipeTopicsVariables | ActionABlogPipeTopicsVariables & { id: string })[],\n      options?: LimitToKnownKeys<Options, ActionABlogPipeTopicsOptions>\n    ): Promise<ActionABlogPipeTopicsResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkActionABlogPipeTopics\";\n    namespace: null;\n    modelApiIdentifier: \"blogPipeTopics\";\n    modelSelectionField: \"blogPipeTopics\";\n    isBulk: true;\n    defaultSelection: typeof DefaultBlogPipeTopicsSelection;\n    selectionType: AvailableBlogPipeTopicsSelection;\n    optionsType: ActionABlogPipeTopicsOptions;\n    schemaType: Query[\"blogPipeTopics\"];\n    variablesType: (FullyQualifiedActionABlogPipeTopicsVariables | ActionABlogPipeTopicsVariables & { id: string })[];\n    variables: {\n        inputs: {\n          required: true;\n          type: \"[BulkActionABlogPipeTopicsInput!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends ActionABlogPipeTopicsOptions>(\n        inputs: (FullyQualifiedActionABlogPipeTopicsVariables | ActionABlogPipeTopicsVariables & { id: string })[],\n      options?: LimitToKnownKeys<Options, ActionABlogPipeTopicsOptions>\n    ) => {\n        const fullyQualifiedInputs = inputs.map(input =>\n          disambiguateActionParams(\n            this[\"actionA\"],\n            undefined,\n            input\n          )\n        );\n      \n      return (await actionRunner<any>(\n        this,\n        \"bulkActionABlogPipeTopics\",\n        DefaultBlogPipeTopicsSelection,\n        \"blogPipeTopics\",\n        \"blogPipeTopics\",\n        true,\n          {\n            inputs: {\n              value: fullyQualifiedInputs,\n              ...this[\"bulkActionA\"].variables[\"inputs\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkActionABlogPipeTopics\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"blogPipeTopics\",\n      isBulk: true,\n      defaultSelection: DefaultBlogPipeTopicsSelection,\n      variables: {\n        inputs: {\n          required: true,\n          type: \"[BulkActionABlogPipeTopicsInput!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: true,\n    } as any\n  );\n\n  \n}\n"],
  "mappings": "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",
  "names": []
}
