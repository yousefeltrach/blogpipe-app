{
  "version": 3,
  "sources": ["../../src/models/ShopifyInventoryItem.ts"],
  "sourcesContent": ["import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  DefaultSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n  Select,\n  DeepFilterNever,\n  IDsList,\n      ShopifyInventoryItem,\n      ShopifyInventoryItemSort,\n      ShopifyInventoryItemFilter,\n      AvailableShopifyInventoryItemSelection,\n  \n} from \"../types.js\";\n\nimport { disambiguateActionParams } from \"../support.js\";\n\nexport const DefaultShopifyInventoryItemSelection = {\n  \"__typename\": true,\n  \"cost\": true,\n  \"countryCodeOfOrigin\": true,\n  \"countryHarmonizedSystemCodes\": true,\n  \"createdAt\": true,\n  \"harmonizedSystemCode\": true,\n  \"id\": true,\n  \"provinceCodeOfOrigin\": true,\n  \"requiresShipping\": true,\n  \"shopifyCreatedAt\": true,\n  \"shopifyUpdatedAt\": true,\n  \"sku\": true,\n  \"tracked\": true,\n  \"updatedAt\": true\n} as const;\n\n/**\n* Produce a type that holds only the selected fields (and nested fields) of \"shopifyInventoryItem\". The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyInventoryItemOrDefault<Options extends Selectable<AvailableShopifyInventoryItemSelection>> = DeepFilterNever<\n  Select<\n    ShopifyInventoryItem,\n    DefaultSelection<\n      AvailableShopifyInventoryItemSelection,\n      Options,\n      typeof DefaultShopifyInventoryItemSelection\n    >\n  >>;\n\n/** Options that can be passed to the `ShopifyInventoryItemManager#findOne` method */\nexport interface FindOneShopifyInventoryItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyInventoryItemSelection;\n};\n\n/** Options that can be passed to the `ShopifyInventoryItemManager#maybeFindOne` method */\nexport interface MaybeFindOneShopifyInventoryItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyInventoryItemSelection;\n};\n\n/** Options that can be passed to the `ShopifyInventoryItemManager#findMany` method */\nexport interface FindManyShopifyInventoryItemsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyInventoryItemSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyInventoryItemSort | ShopifyInventoryItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyInventoryItemFilter | ShopifyInventoryItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyInventoryItemManager#findFirst` method */\nexport interface FindFirstShopifyInventoryItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyInventoryItemSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyInventoryItemSort | ShopifyInventoryItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyInventoryItemFilter | ShopifyInventoryItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyInventoryItemManager#maybeFindFirst` method */\nexport interface MaybeFindFirstShopifyInventoryItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyInventoryItemSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyInventoryItemSort | ShopifyInventoryItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyInventoryItemFilter | ShopifyInventoryItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n\nconst apiIdentifier = \"shopifyInventoryItem\";\nconst pluralApiIdentifier = \"shopifyInventoryItems\";\n\n\n\n\n\n/** All the actions available at the collection level and record level for \"shopifyInventoryItem\" */\nexport class ShopifyInventoryItemManager {\n  constructor(readonly connection: GadgetConnection) {}\n\n  \n    /**\n * Finds one shopifyInventoryItem by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nfindOne: {\n  <Options extends FindOneShopifyInventoryItemOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyInventoryItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      >\n    >;\n  type: \"findOne\",\n  findByVariableName: \"id\";\n  operationName: \"shopifyInventoryItem\";\n  modelApiIdentifier: \"shopifyInventoryItem\";\n  defaultSelection: typeof DefaultShopifyInventoryItemSelection;\n  selectionType: AvailableShopifyInventoryItemSelection;\n  optionsType: FindOneShopifyInventoryItemOptions;\n  schemaType: Query[\"shopifyInventoryItem\"];\n} = Object.assign(\n  async <Options extends FindOneShopifyInventoryItemOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyInventoryItemOptions>) => {\n    return await findOneRunner<SelectedShopifyInventoryItemOrDefault<Options>>(\n      this,\n      \"shopifyInventoryItem\",\n      id,\n      DefaultShopifyInventoryItemSelection,\n      apiIdentifier,\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyInventoryItem\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyInventoryItemSelection,\n  } as any\n)\n\n  \n    /**\n * Finds one shopifyInventoryItem by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nmaybeFindOne: {\n  <Options extends MaybeFindOneShopifyInventoryItemOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyInventoryItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindOne\";\n  findByVariableName: \"id\";\n  operationName: \"shopifyInventoryItem\";\n  modelApiIdentifier: \"shopifyInventoryItem\";\n  defaultSelection: typeof DefaultShopifyInventoryItemSelection;\n  selectionType: AvailableShopifyInventoryItemSelection;\n  optionsType: MaybeFindOneShopifyInventoryItemOptions;\n  schemaType: Query[\"shopifyInventoryItem\"];\n} = Object.assign(\n  async <Options extends MaybeFindOneShopifyInventoryItemOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyInventoryItemOptions>) => {\n    const record = await findOneRunner<SelectedShopifyInventoryItemOrDefault<Options>>(\n      this,\n      \"shopifyInventoryItem\",\n      id,\n      DefaultShopifyInventoryItemSelection,\n      apiIdentifier,\n      options,\n      false\n    );\n    return record.isEmpty() ? null : record;\n  },\n  {\n    type: \"maybeFindOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyInventoryItem\",\n    modelApiIdentifier: \"shopifyInventoryItem\",\n    defaultSelection: DefaultShopifyInventoryItemSelection,\n  } as any\n)\n\n  \n    /**\n * Finds many shopifyInventoryItem. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindMany: {\n  <Options extends FindManyShopifyInventoryItemsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyInventoryItemsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      >\n    >;\n  type: \"findMany\";\n  operationName: \"shopifyInventoryItems\";\n  modelApiIdentifier: \"shopifyInventoryItem\";\n  defaultSelection: typeof DefaultShopifyInventoryItemSelection;\n  selectionType: AvailableShopifyInventoryItemSelection;\n  optionsType: FindManyShopifyInventoryItemsOptions;\n  schemaType: Query[\"shopifyInventoryItem\"];\n} = Object.assign(\n  async <Options extends FindManyShopifyInventoryItemsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyInventoryItemsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      >\n    > =>\n  {\n    return await findManyRunner<SelectedShopifyInventoryItemOrDefault<Options>>(\n      this,\n      \"shopifyInventoryItems\",\n      DefaultShopifyInventoryItemSelection,\n      \"shopifyInventoryItem\",\n      options\n    );\n  },\n  {\n    type: \"findMany\",\n    operationName: \"shopifyInventoryItems\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyInventoryItemSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyInventoryItem. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindFirst: {\n  <Options extends FindFirstShopifyInventoryItemOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyInventoryItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      >\n    >;\n  type: \"findFirst\";\n  operationName: \"shopifyInventoryItems\";\n  modelApiIdentifier: \"shopifyInventoryItem\";\n  defaultSelection: typeof DefaultShopifyInventoryItemSelection;\n  selectionType: AvailableShopifyInventoryItemSelection;\n  optionsType: FindFirstShopifyInventoryItemOptions;\n  schemaType: Query[\"shopifyInventoryItem\"];\n} = Object.assign(\n  async <Options extends FindFirstShopifyInventoryItemOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyInventoryItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      >\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyInventoryItemOrDefault<Options>>(\n      this,\n      \"shopifyInventoryItems\",\n      DefaultShopifyInventoryItemSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      true\n    );\n    return list[0];\n  },\n  {\n    type: \"findFirst\",\n    operationName: \"shopifyInventoryItems\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyInventoryItemSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyInventoryItem. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n **/\nmaybeFindFirst: {\n  <Options extends MaybeFindFirstShopifyInventoryItemOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyInventoryItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindFirst\";\n  operationName: \"shopifyInventoryItems\";\n  modelApiIdentifier: \"shopifyInventoryItem\";\n  defaultSelection: typeof DefaultShopifyInventoryItemSelection;\n  selectionType: AvailableShopifyInventoryItemSelection;\n  optionsType: MaybeFindFirstShopifyInventoryItemOptions;\n  schemaType: Query[\"shopifyInventoryItem\"];\n} = Object.assign(\n  async <Options extends MaybeFindFirstShopifyInventoryItemOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyInventoryItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyInventoryItemOrDefault<Options>\n      > | null\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyInventoryItemOrDefault<Options>>(\n      this,\n      \"shopifyInventoryItems\",\n      DefaultShopifyInventoryItemSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      false\n    );\n    return list?.[0] ?? null;\n  },\n  {\n    type: \"maybeFindFirst\",\n    operationName: \"shopifyInventoryItems\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyInventoryItemSelection,\n  } as any\n);\n\n  \n}\n"],
  "mappings": "AAAA;AAAA,EAOE;AAAA,EACA;AAAA,OAKK;AAiBA,MAAM,uCAAuC;AAAA,EAClD,cAAc;AAAA,EACd,QAAQ;AAAA,EACR,uBAAuB;AAAA,EACvB,gCAAgC;AAAA,EAChC,aAAa;AAAA,EACb,wBAAwB;AAAA,EACxB,MAAM;AAAA,EACN,wBAAwB;AAAA,EACxB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,OAAO;AAAA,EACP,WAAW;AAAA,EACX,aAAa;AACf;AAoBC;AAMA;AAgBA;AAYA;AAYA;AAGD,MAAM,gBAAgB;AACtB,MAAM,sBAAsB;AAOrB,MAAM,4BAA4B;AAAA,EACvC,YAAqB,YAA8B;AAA9B;AAMvB;AAAA;AAAA;AAAA,mBAeI,OAAO;AAAA,MACT,OAA2D,IAAY,YAA4E;AACjJ,eAAO,MAAM;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,wBAeI,OAAO;AAAA,MACT,OAAgE,IAAY,YAAiF;AAC3J,cAAM,SAAS,MAAM;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,eAAO,OAAO,QAAQ,IAAI,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,oBAcI,OAAO;AAAA,MACT,OAA6D,YAM7D;AACE,eAAO,MAAM;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,qBAcI,OAAO;AAAA,MACT,OAA6D,YAM7D;AACE,cAAM,OAAO,MAAM;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,EAAE,GAAG,SAAS,OAAO,GAAG,MAAM,QAAW,QAAQ,QAAW,OAAO,OAAU;AAAA,UAC7E;AAAA,QACF;AACA,eAAO,KAAK,CAAC;AAAA,MACf;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,0BAcI,OAAO;AAAA,MACT,OAAkE,YAMlE;AACE,cAAM,OAAO,MAAM;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,EAAE,GAAG,SAAS,OAAO,GAAG,MAAM,QAAW,QAAQ,QAAW,OAAO,OAAU;AAAA,UAC7E;AAAA,QACF;AACA,eAAO,OAAO,CAAC,KAAK;AAAA,MACtB;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAAA,EAlNsD;AAqNtD;",
  "names": []
}
